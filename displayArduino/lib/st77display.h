#ifndef ST77DISPLAY_H
#define ST77DISPLAY_H

#include "helper.h"
#include "spiAVR.h"
#include "serialATmega.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define RES_PIN PB4
#define AO_PIN PB0
#define CS_PIN PB2

#define AO_OFF          PORTB &= ~(1 << AO_PIN)
#define AO_ON           PORTB |= (1 << AO_PIN)
#define CS_OFF          PORTB &= ~(1 << CS_PIN)
#define CS_ON           PORTB |= (1 << CS_PIN)
#define RESET_OFF       PORTB &= ~(1 << RES_PIN)
#define RESET_ON        PORTB |= (1 << RES_PIN)

#define BLACK           0x0000
#define WHITE           0xFFFF
#define BLUE            0xF800
#define GREEN           0x07E0
#define RED             0x001F
#define YELLOW          0x07FF
#define PINK            0xF81F
#define CYAN            0xFFE0
#define MAGENTA         0xFC18
#define GRAY            0x8410

int size, size2;

void send_command(uint8_t cmd) {
    AO_OFF;
    CS_OFF;
    SPI_SEND(cmd);
    CS_ON;
}

void pass_data(uint8_t data) {
    AO_ON;
    CS_OFF;
    SPI_SEND(data);
    CS_ON;
}

void set_column(uint16_t start, uint16_t end) {
    send_command(0x2A);
    pass_data(start >> 8);
    pass_data(start & 0xFF);
    pass_data(end >> 8);
    pass_data(end & 0xFF);
}

void set_row(uint16_t start, uint16_t end) {
    send_command(0x2B);
    pass_data(start >> 8);
    pass_data(start & 0xFF);
    pass_data(end >> 8);
    pass_data(end & 0xFF);
}

void write_pixel(uint16_t color) {
    pass_data((color >> 8) & 0xFF);
    pass_data(color & 0xFF);
}

void populate_screen(uint16_t color) {
    set_column(0, 127);
    set_row(0, 159);
    send_command(0x2C);

    for (uint32_t i = 0; i < 128 * 160; ++i) {
        write_pixel(color);
    }
}

void write_to_screen(int startRow, int endRow, int startColumn, int endColumn, int color) {
    set_column(startColumn, endColumn);
    set_row(startRow, endRow);
    send_command(0x2C);

    for (int i = startRow; i < (endRow - startRow + 1) * (endColumn - startColumn + 1); ++i) {
        write_pixel(color);
    }
}

void SPI_SEND_NEW(uint8_t data) {
    SPDR = data;
    while(!(SPSR & (1 << SPIF))); 
}

void reset_whole() {
  RESET_OFF;
  _delay_ms(200);
  RESET_ON;
  _delay_ms(200);
}

void ST7735_Init() {
    reset_whole();
    PORTB = SetBit(PORTB, 1, 0);
    PORTB = SetBit(PORTB, 2, 0);
    _delay_ms(200);
    send_command(0x11);
    _delay_ms(200);
    send_command(0x36);
    pass_data(0x00); 
    send_command(0x3A); 
    pass_data(0x05); 
    send_command(0x29); 
    _delay_ms(200);
    set_column(0, 127);
    set_row(0, 159);
}

const uint8_t largerFont[96][10] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' ' (space)
    {0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00}, // '!'
    {0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00}, // '"'
    {0x00, 0x36, 0x36, 0xFF, 0x36, 0xFF, 0x36, 0x36, 0x00, 0x00}, // '#'
    {0x00, 0x18, 0x7E, 0xC3, 0xC0, 0x7E, 0x03, 0xC3, 0x7E, 0x18}, // '$'
    {0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00, 0x00}, // '%'
    {0x00, 0x38, 0x6C, 0x6C, 0x38, 0x6D, 0xC7, 0xC7, 0x6D, 0x00}, // '&'
    {0x00, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // '''
    {0x00, 0x18, 0x30, 0x60, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00}, // '('
    {0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00}, // ')'
    {0x00, 0x10, 0x54, 0x38, 0x7C, 0x38, 0x54, 0x10, 0x00, 0x00}, // '*'
    {0x00, 0x00, 0x00, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x00}, // '+'
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x0C, 0x18, 0x00}, // ','
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00}, // '-'
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x00}, // '.'
    {0x00, 0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00}, // '/'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E}, // '0'
    {0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF}, // '1'
    {0x00, 0x7E, 0xFF, 0xC3, 0x06, 0x1C, 0x30, 0x60, 0xFF, 0xFF}, // '2'
    {0x00, 0x7E, 0xFF, 0xC3, 0x06, 0x1E, 0x06, 0xC3, 0xFF, 0x7E}, // '3'
    {0x00, 0x06, 0x1E, 0x36, 0x66, 0xFF, 0xFF, 0x06, 0x06, 0x06}, // '4'
    {0x00, 0xFF, 0xFF, 0xC0, 0xFE, 0xFF, 0x03, 0xC3, 0xFF, 0x7E}, // '5'
    {0x00, 0x7E, 0xFF, 0xC3, 0xFE, 0xFF, 0xC3, 0xC3, 0xFF, 0x7E}, // '6'
    {0x00, 0xFF, 0xFF, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30}, // '7'
    {0x00, 0x7E, 0xFF, 0xC3, 0x7E, 0x7E, 0xC3, 0xC3, 0xFF, 0x7E}, // '8'
    {0x00, 0x7E, 0xFF, 0xC3, 0xFF, 0x7F, 0x03, 0xC3, 0xFF, 0x7E}, // '9'
    {0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00}, // ':'
    {0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0x7C, 0x0C, 0x18}, // ';'
    {0x00, 0x06, 0x1C, 0x30, 0xC0, 0xC0, 0x30, 0x1C, 0x06, 0x00}, // '<'
    {0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00}, // '='
    {0x00, 0x60, 0x38, 0x0C, 0x03, 0x03, 0x0C, 0x38, 0x60, 0x00}, // '>'
    {0x00, 0x7E, 0xFF, 0xC3, 0x06, 0x1C, 0x18, 0x00, 0x18, 0x00}, // '?'
    {0x00, 0x7E, 0xFF, 0xC3, 0xDB, 0xDB, 0xDF, 0xC0, 0xFF, 0x7E}, // '@'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3}, // 'A'
    {0x00, 0xFC, 0xFE, 0xC3, 0xFE, 0xFE, 0xC3, 0xC3, 0xFE, 0xFC}, // 'B'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC0, 0xC0, 0xC3, 0xFF, 0x7E, 0x00}, // 'C'
    {0x00, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, 0x00}, // 'D'
    {0x00, 0xFF, 0xFF, 0xC0, 0xFE, 0xFE, 0xC0, 0xFF, 0xFF, 0x00}, // 'E'
    {0x00, 0xFF, 0xFF, 0xC0, 0xFE, 0xFE, 0xC0, 0xC0, 0xC0, 0x00}, // 'F'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC0, 0xCF, 0xC3, 0xFF, 0x7F, 0x00}, // 'G'
    {0x00, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0x00}, // 'H'
    {0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00}, // 'I'
    {0x00, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xFC, 0x78}, // 'J'
    {0x00, 0xC3, 0xC3, 0xC6, 0xCC, 0xF8, 0xF8, 0xCC, 0xC6, 0xC3}, // 'K'
    {0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0x00}, // 'L'
    {0x00, 0xC3, 0xE7, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3, 0x00}, // 'M'
    {0x00, 0xC3, 0xE3, 0xF3, 0xDB, 0xCF, 0xC7, 0xC3, 0xC3, 0x00}, // 'N'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E, 0x00}, // 'O'
    {0x00, 0xFC, 0xFE, 0xC3, 0xC3, 0xFE, 0xFC, 0xC0, 0xC0, 0x00}, // 'P'
    {0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xCF, 0xCC, 0xFF, 0x7E, 0x03}, // 'Q'
    {0x00, 0xFC, 0xFE, 0xC3, 0xC3, 0xFE, 0xFC, 0xCC, 0xC6, 0xC3}, // 'R'
    {0x00, 0x7E, 0xFF, 0xC3, 0x60, 0x1C, 0x03, 0xC3, 0xFF, 0x7E}, // 'S'
    {0x00, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00}, // 'T'
    {0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E}, // 'U'
    {0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x18, 0x00}, // 'V'
    {0x00, 0xC3, 0xC3, 0xC3, 0xDB, 0xFF, 0x7E, 0x66, 0x66, 0x00}, // 'W'
    {0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0xC3, 0x00}, // 'X'
    {0x00, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x00}, // 'Y'
    {0x00, 0xFF, 0xFF, 0x03, 0x06, 0x0C, 0x18, 0x30, 0xFF, 0xFF}, // 'Z'
    {0x00, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00}, // '['
    {0x00, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00, 0x00}, // '\'
    {0x00, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7E, 0x00}, // ']'
    {0x00, 0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00}, // '^'
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF}, // '_'
    {0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // '`'
    {0x00, 0x00, 0x00, 0x7E, 0x7E, 0x06, 0x7E, 0xCE, 0x7E, 0x00}, // 'a'
    {0x00, 0xC0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC}, // 'b'
    {0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC3, 0xC0, 0xC3, 0xFF, 0x7E}, // 'c'
    {0x00, 0x03, 0x03, 0x7F, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0x7F}, // 'd'
    {0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC3, 0xFE, 0xFE, 0x7E, 0x00}, // 'e'
    {0x00, 0x3C, 0x66, 0x60, 0xFC, 0xFC, 0x60, 0x60, 0x60, 0x00}, // 'f'
    {0x00, 0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0x7F, 0xFF, 0x03, 0xFE}, // 'g'
    {0x00, 0xC0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0x00}, // 'h'
    {0x00, 0x18, 0x00, 0x18, 0x7E, 0x7E, 0x18, 0x7E, 0x7E, 0x00}, // 'i'
    {0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x7E}, // 'j'
    {0x00, 0xC0, 0xC0, 0xC3, 0xC6, 0xDC, 0xF8, 0xDC, 0xC6, 0xC3}, // 'k'
    {0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00}, // 'l'
    {0x00, 0x00, 0x00, 0xF6, 0xFF, 0xDB, 0xDB, 0xDB, 0xC3, 0x00}, // 'm'
    {0x00, 0x00, 0x00, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0x00}, // 'n'
    {0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E}, // 'o'
    {0x00, 0x00, 0x00, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC}, // 'p'
    {0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0x7F}, // 'q'
    {0x00, 0x00, 0x00, 0xDB, 0xFF, 0xF7, 0xC0, 0xC0, 0xC0, 0x00}, // 'r'
    {0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC0, 0x7E, 0x03, 0xFF, 0x7E}, // 's'
    {0x00, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 't'
    {0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E}, // 'u'
    {0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x18, 0x00}, // 'v'
    {0x00, 0x00, 0x00, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x00}, // 'w'
    {0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x3C, 0x66, 0xC3, 0x00}, // 'x'
    {0x00, 0x00, 0x00, 0xC3, 0xC3, 0x7F, 0x03, 0xC3, 0xFF, 0x7E}, // 'y'
    {0x00, 0x00, 0x00, 0xFF, 0xFF, 0x06, 0x1C, 0x30, 0xFF, 0xFF}, // 'z'
    {0x00, 0x1E, 0x30, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x30, 0x1E}, // '{'
    {0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00}, // '|'
    {0x00, 0x78, 0x0C, 0x0C, 0x0C, 0x1E, 0x0C, 0x0C, 0x0C, 0x78}, // '}'
    {0x00, 0x66, 0xFF, 0xDB, 0xDB, 0xC3, 0x00, 0x00, 0x00, 0x00}, // '->'
    {0x00, 0x66, 0xFF, 0xDB, 0xDB, 0xFF, 0x66, 0x00, 0x00, 0x00}  // '<-'
};

void draw_char(uint16_t x, uint16_t y, char c, uint16_t color, float scale) {
    serial_println(c);
    if (c < ' ' || c > '~') return; // Check for valid ASCII range
    int index = c - ' ';
    for (int i = 0; i < 10; i++) {
        uint8_t line = largerFont[index][i];
        for (int j = 0; j < 8; j++) {
            if (line & (1 << (7 - j))) { // Check if the bit is set
                for (int k = 0; k < scale; k++) {
                    for (int l = 0; l < scale; l++) {
                        set_column(x + (j * scale) + k, x + (j * scale) + k + 1);
                        set_row(y + (i * scale) + l, y + (i * scale) + l + 1);
                        send_command(0x2C); // RAMWR
                        write_pixel(color);
                    }
                }
            }
        }
    }
}


#endif